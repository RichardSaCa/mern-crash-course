name: Build, Test, and Publish

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Instalar dependencias usando `npm ci`
      - name: Install dependencies
        run: npm ci

      # Construir el proyecto si aplica
      - name: Build project
        run: npm run build --if-present

      # Obtener el tag desde el archivo .env
      - name: Obtener Tag
        id: obtener_tag
        run: |
          if [ -f ".env" ]; then
            TAG=$(grep PAM_APP_VERSION .env | awk -F '=' '{print $2}')
            echo "TAG=$TAG" >> $GITHUB_ENV
            echo "Tag encontrado: $TAG"
          else
            echo "El archivo .env no existe o no contiene PAM_APP_VERSION."
            exit 1
          fi

      # Configurar metadata de la imagen Docker
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{env.TAG}}

      # Loguearse en GitHub Container Registry
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Construir y publicar la imagen Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v5.0.0
        env:
          DOCKER_BUILDKIT: 1
        with:
          context: .
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
